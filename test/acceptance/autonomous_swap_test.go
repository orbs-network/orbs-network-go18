package acceptance

import (
	"context"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/orbs-network/orbs-client-sdk-go/orbsclient"
	"github.com/orbs-network/orbs-network-go/crypto/keys"
	"github.com/orbs-network/orbs-network-go/services/crosschainconnector/ethereum/adapter"
	"github.com/orbs-network/orbs-network-go/services/processor/native/repository/ASBEthereum"
	"github.com/orbs-network/orbs-network-go/services/processor/native/repository/ERC20Proxy"
	"github.com/orbs-network/orbs-network-go/test"
	"github.com/orbs-network/orbs-network-go/test/builders"
	testKeys "github.com/orbs-network/orbs-network-go/test/crypto/keys"
	"github.com/orbs-network/orbs-network-go/test/harness"
	"github.com/orbs-network/orbs-spec/types/go/primitives"
	"github.com/orbs-network/orbs-spec/types/go/protocol"
	"github.com/stretchr/testify/require"
	"math/big"
	"testing"
)

func TestTransferFromEthereumToOrbs(t *testing.T) {
	t.Skip()
	harness.Network(t).
		Start(func(ctx context.Context, network harness.TestNetworkDriver) {
			d := newAutonomousSwapDriver(network)

			etherAmountBefore := big.NewInt(20)
			amountToTransfer := big.NewInt(17)

			d.generateOrbsAccount(t)

			d.deployTokenContractToEthereum(t)
			d.generateEthereumAccountAndAssignFunds(t, etherAmountBefore)

			d.deployAutonomousSwapBridgeToEthereum(t)
			d.bindOrbsAutonomousSwapBridgeToEthereum(ctx, t)

			d.approveTransferInEthereumTokenContract(t, amountToTransfer)
			transferOutTxHash := d.transferOutFromEthereum(t, amountToTransfer)
			t.Log("Eth tx hash", transferOutTxHash)

			// TODO v1 deploy causes who is owner - important for both.
			d.transferInToOrbs(ctx, t, transferOutTxHash)

			balanceAfterTransfer := d.getBalanceInOrbs(ctx, t)
			require.EqualValues(t, amountToTransfer.Uint64(), balanceAfterTransfer, "wrong amount of tokens in orbs")

			etherBalanceAfterTransfer := d.getBalanceInEthereum(t)
			require.EqualValues(t, etherAmountBefore.Sub(etherAmountBefore, amountToTransfer).Uint64(), etherBalanceAfterTransfer, "wrong amount of tokens left in ethereum")

		})
}

func TestTransferFromOrbsToEthereum(t *testing.T) {
	t.Skip()
	harness.Network(t).
		Start(func(ctx context.Context, network harness.TestNetworkDriver) {
			d := newAutonomousSwapDriver(network)

			etherAmount := big.NewInt(3)
			amount := big.NewInt(17)

			d.generateOrbsAccount(t)
			d.generateOrbsFunds(ctx, t, amount)

			d.deployTokenContractToEthereum(t)
			d.generateEthereumAccountAndAssignFunds(t, etherAmount)

			d.deployAutonomousSwapBridgeToEthereum(t)
			d.bindOrbsAutonomousSwapBridgeToEthereum(ctx, t)

			// TODO v1 deploy causes who is owner - important for both.
			d.transferOutFromOrbs(ctx, t, amount)

			//d.transferInToEthereum(ctx, t)

			//balanceAfterTransfer := d.getBalanceInEthereum(t)
			//require.EqualValues(t, etherAmount.Add(etherAmount, amount).Uint64(), balanceAfterTransfer, "wrong amount")

			orbsBalanceAfterTransfer := d.getBalanceInOrbs(ctx, t)
			require.EqualValues(t, 0, orbsBalanceAfterTransfer, "wrong amount")
		})
}

func newAutonomousSwapDriver(networkDriver harness.TestNetworkDriver) *driver {
	simulator := networkDriver.EthereumSimulator()
	return &driver{
		network:                  networkDriver,
		simulator:                simulator,
		addressInEthereum:        simulator.GetAuth(),
		orbsASBContractName:      asb_ether.CONTRACT_NAME,
		orbsContractOwnerAddress: testKeys.Ed25519KeyPairForTests(5),
	}
}

type driver struct {
	network   harness.TestNetworkDriver
	simulator *adapter.EthereumSimulator

	orbsContractOwnerAddress *keys.Ed25519KeyPair
	orbsASBContractName      string
	orbsUser                 *orbsclient.OrbsAccount
	orbsUserAddress          [20]byte
	orbsUserKeyPair          *keys.Ed25519KeyPair

	addressInEthereum *bind.TransactOpts // we use a single address for both the "admin" stuff like deploying the contracts and as our swapping user, so as to simplify setup - otherwise we'll need to create two PKs in the simulator

	erc20contract  *bind.BoundContract
	erc20address   *common.Address
	ethASBAddress  *common.Address
	ethASBContract *bind.BoundContract
}

// orbs side funcs
func (d *driver) generateOrbsAccount(t *testing.T) {
	orbsUser, err := orbsclient.CreateAccount()
	require.NoError(t, err, "could not create orbs address")

	copy(d.orbsUserAddress[:], orbsUser.RawAddress)
	d.orbsUser = orbsUser
	d.orbsUserKeyPair = keys.NewEd25519KeyPair(orbsUser.PublicKey, orbsUser.PrivateKey)
}

func (d *driver) generateOrbsFunds(ctx context.Context, t *testing.T, amount *big.Int) {
	response, txHash := d.network.SendTransaction(ctx, builders.Transaction().
		WithMethod(primitives.ContractName(erc20proxy.CONTRACT_NAME), "mint").
		WithEd25519Signer(d.orbsContractOwnerAddress).
		WithArgs(d.orbsUser.RawAddress, amount.Uint64()).
		Builder(), 0)
	d.network.WaitForTransactionInState(ctx, txHash)
	test.RequireSuccess(t, response, "failed setting minting tokens at orbs")
}

func (d *driver) getBalanceInOrbs(ctx context.Context, t *testing.T) uint64 {
	balanceResponse := d.network.CallMethod(ctx, builders.Transaction().
		WithEd25519Signer(d.orbsContractOwnerAddress).
		WithMethod(primitives.ContractName(erc20proxy.CONTRACT_NAME), "balanceOf").
		WithArgs(d.orbsUser.RawAddress).
		Builder().Transaction, 0)
	require.EqualValues(t, protocol.EXECUTION_RESULT_SUCCESS, balanceResponse.CallMethodResult())
	// check that the tokens got there.
	outputArgsIterator := builders.ClientCallMethodResponseOutputArgumentsDecode(balanceResponse)
	value := outputArgsIterator.NextArguments().Uint64Value()
	return value
}

func (d *driver) approveTransferInOrbsTokenContract(ctx context.Context, t *testing.T, amount *big.Int) {
	response, txHash := d.network.SendTransaction(ctx, builders.Transaction().
		WithEd25519Signer(d.orbsUserKeyPair).
		WithMethod(primitives.ContractName(erc20proxy.CONTRACT_NAME), "approve").
		WithArgs(d.addressInEthereum.From, amount.Uint64()).
		Builder(), 0)
	d.network.WaitForTransactionInState(ctx, txHash)
	test.RequireSuccess(t, response, "failed approve transfer in orbs")
}

func (d *driver) bindOrbsAutonomousSwapBridgeToEthereum(ctx context.Context, t *testing.T) {
	response, txHash := d.network.SendTransaction(ctx, builders.Transaction().
		WithMethod(primitives.ContractName(d.orbsASBContractName), "setAsbAddr").
		WithEd25519Signer(d.orbsContractOwnerAddress).
		WithArgs(d.ethASBAddress.Hex()).
		Builder(), 0)
	d.network.WaitForTransactionInState(ctx, txHash)
	test.RequireSuccess(t, response, "failed setting asb address")
}

func (d *driver) transferInToOrbs(ctx context.Context, t *testing.T, transferOutTxHash string) {
	response, txHash := d.network.SendTransaction(ctx, builders.Transaction().
		WithMethod(primitives.ContractName(d.orbsASBContractName), "transferIn").
		WithEd25519Signer(d.orbsContractOwnerAddress).
		WithArgs(transferOutTxHash).
		Builder(), 0)
	d.network.WaitForTransactionInState(ctx, txHash)
	test.RequireSuccess(t, response, "failed transferIn in orbs")
}

func (d *driver) transferOutFromOrbs(ctx context.Context, t *testing.T, amount *big.Int) {
	response, txHash := d.network.SendTransaction(ctx, builders.Transaction().
		WithMethod(primitives.ContractName(d.orbsASBContractName), "transferOut").
		WithEd25519Signer(d.orbsUserKeyPair).
		WithArgs(d.addressInEthereum.From.Bytes(), amount.Uint64()).
		Builder(), 0)
	d.network.WaitForTransactionInState(ctx, txHash)

	t.Log(response.StringTransactionReceipt())
	t.Log(builders.PackedArgumentArrayDecode(response.TransactionReceipt().RawOutputArgumentArrayWithHeader()))
	test.RequireSuccess(t, response, "failed transfer out in orbs")
}

// Ethereum related funcs
func (d *driver) deployAutonomousSwapBridgeToEthereum(t *testing.T) {
	fakeFederation := common.BigToAddress(big.NewInt(1700))
	zero := common.BigToAddress(big.NewInt(0))

	ethAsbAddress, ethAsbContract, err := d.simulator.DeployEthereumContract(d.addressInEthereum, asbABI, asbByteCode, uint32(0), uint64(builders.DEFAULT_TEST_VIRTUAL_CHAIN_ID), //TODO CHANGE IN LEoNId,
		d.orbsASBContractName, d.erc20address, fakeFederation, zero)
	require.NoError(t, err, "could not deploy asb to Ethereum")
	d.simulator.Commit()
	d.ethASBAddress = ethAsbAddress
	d.ethASBContract = ethAsbContract
}

func (d *driver) deployTokenContractToEthereum(t *testing.T) {
	ethTetAddress, ethTetContract, err := d.simulator.DeployEthereumContract(d.addressInEthereum, tetABI, tetByteCode)
	require.NoError(t, err, "could not deploy erc token to Ethereum")
	d.simulator.Commit()
	d.erc20contract = ethTetContract
	d.erc20address = ethTetAddress
}

func (d *driver) generateEthereumAccountAndAssignFunds(t *testing.T, amount *big.Int) {
	ethContractUserAuth := d.addressInEthereum
	// we don't REALLY care who is the user we transfer from, so for simplicity's sake we use the same mega-user defined when simulator is created
	_, err := d.erc20contract.Transact(d.addressInEthereum, "assign", ethContractUserAuth.From /*address of user*/, amount)
	// generate token in source address
	require.NoError(t, err, "could not assign token to sender")
	d.simulator.Commit()
}

func (d *driver) getBalanceInEthereum(t *testing.T) uint64 {
	ethContractUserAuth := d.addressInEthereum
	// we don't REALLY care who is the user we transfer from, so for simplicity's sake we use the same mega-user defined when simulator is created
	var (
		ret0 = new(*big.Int)
	)
	result := ret0
	err := d.erc20contract.Call(nil, result, "balanceOf", ethContractUserAuth.From /*address of user*/)
	// generate token in source address
	require.NoError(t, err, "could not get token balance of user")
	d.simulator.Commit()
	return (*result).Uint64()
}

func (d *driver) approveTransferInEthereumTokenContract(t *testing.T, amount *big.Int) {
	tx, err := d.erc20contract.Transact(d.addressInEthereum, "approve", d.ethASBAddress, amount)
	require.NoError(t, err, "could not approve transfer")
	d.simulator.Commit()
	receipt, err := d.simulator.Receipt(tx.Hash())
	require.NoError(t, err, "could not get receipt")
	require.EqualValues(t, types.ReceiptStatusSuccessful, receipt.Status, "call to approve on tet in Ethereum failed")

}

func (d *driver) transferOutFromEthereum(t *testing.T, amount *big.Int) string {
	transferOutTx, err := d.ethASBContract.Transact(d.addressInEthereum, "transferOut", d.orbsUserAddress, amount)
	d.simulator.Commit()
	require.NoError(t, err, "could not transfer out")

	receipt, err := d.simulator.Receipt(transferOutTx.Hash())
	require.NoError(t, err, "could not get receipt")
	require.EqualValues(t, types.ReceiptStatusSuccessful, receipt.Status, "call to transferOut on ASB in Ethereum failed")

	return transferOutTx.Hash().Hex()
}

const tetABI = `[{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"constant":false,"inputs":[{"name":"_account","type":"address"},{"name":"_value","type":"uint256"}],"name":"assign","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]`
const tetByteCode = "0x608060405234801561001057600080fd5b506111aa806100206000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b31461009e57806318160ddd1461010357806323b872dd1461012e57806339509351146101b357806370a0823114610218578063a457c2d71461026f578063a9059cbb146102d4578063be76048814610339578063dd62ed3e14610386575b600080fd5b3480156100aa57600080fd5b506100e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103fd565b604051808215151515815260200191505060405180910390f35b34801561010f57600080fd5b5061011861052a565b6040518082815260200191505060405180910390f35b34801561013a57600080fd5b50610199600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610534565b604051808215151515815260200191505060405180910390f35b3480156101bf57600080fd5b506101fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106e6565b604051808215151515815260200191505060405180910390f35b34801561022457600080fd5b50610259600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061091d565b6040518082815260200191505060405180910390f35b34801561027b57600080fd5b506102ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610965565b604051808215151515815260200191505060405180910390f35b3480156102e057600080fd5b5061031f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b9c565b604051808215151515815260200191505060405180910390f35b34801561034557600080fd5b50610384600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bb3565b005b34801561039257600080fd5b506103e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bd3565b6040518082815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561043a57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156105c157600080fd5b61065082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c5a90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106db848484610c7b565b600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561072357600080fd5b6107b282600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156109a257600080fd5b610a3182600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c5a90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610ba9338484610c7b565b6001905092915050565b610bc582610bc08461091d565b610eb5565b610bcf8282611040565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080838311151515610c6c57600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610cc857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610d0457600080fd5b610d55816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c5a90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610de8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9490919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000808284019050838110151515610eab57600080fd5b8091505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1614151515610edb57600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610f2857600080fd5b610f3d81600254610c5a90919063ffffffff16565b600281905550610f94816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c5a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561106657600080fd5b61107b81600254610e9490919063ffffffff16565b6002819055506110d2816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e9490919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a7230582094609698b7c76dff80d05dcaa6cb6f31fb8f800a5026ee62cf6e4f71bba041a40029"

const asbABI = `[{"constant":true,"inputs":[],"name":"EXECUTION_RESULT_SUCCESS","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MAX_SIGNATURES","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BLOCKREFMESSAGE_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ORBS_ADDRESS_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"SIGNATURE_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"BLOCKHASH_OFFSET","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"SHA256_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EXECUTION_RESULT_OFFSET","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"orbsASBContractName","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"federation","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"UINT32_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ORBS_PROTOCOL_VERSION","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"NODE_PK_SIG_NESTING_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"spentOrbsTuids","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"UINT64_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TRANSFERRED_OUT","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"virtualChainId","outputs":[{"name":"","type":"uint64"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ADDRESS_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tuidCounter","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"UINT256_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ONEOF_NESTING_SIZE","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"networkType","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"token","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_networkType","type":"uint32"},{"name":"_virtualChainId","type":"uint64"},{"name":"_orbsASBContractName","type":"string"},{"name":"_token","type":"address"},{"name":"_federation","type":"address"},{"name":"_verifier","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tuid","type":"uint256"},{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"bytes20"},{"indexed":false,"name":"value","type":"uint256"}],"name":"TransferredOut","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"tuid","type":"uint256"},{"indexed":true,"name":"from","type":"bytes20"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"TransferredIn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"constant":false,"inputs":[{"name":"_to","type":"bytes20"},{"name":"_value","type":"uint256"}],"name":"transferOut","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_resultsBlockHeader","type":"bytes"},{"name":"_resultsBlockProof","type":"bytes"},{"name":"_transactionReceipt","type":"bytes"},{"name":"_transactionReceiptProof","type":"bytes32[]"}],"name":"transferIn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]`
const asbByteCode = ""
