package e2e

import (
	"testing"
	"github.com/orbs-network/membuffers/go/e2e/types"
)

func TestAllValid(t *testing.T) {
	buf := []byte{
		// Transaction
		// TransactionData
		0x58,0x00,0x00,0x00, // size
		0x33,0x00,0x00,0x00,
		0x08,0x07,0x06,0x05, 0x04,0x03,0x02,0x01,
		0x40,0x00,0x00,0x00,
		// TransactionSender
		0x1c,0x00,0x00,0x00, // size
		0x03,0x00,0x00,0x00, '1','2','3',0x00,
		0x10,0x00,0x00,0x00, 0x03,0x00,0x00,0x00, '4','5','6',0x00, 0x03,0x00,0x00,0x00, '7','8','9',0x00,
		// TransactionSender
		0x1c,0x00,0x00,0x00, // size
		0x03,0x00,0x00,0x00, 'a','b','c',0x00,
		0x10,0x00,0x00,0x00, 0x03,0x00,0x00,0x00, 'd','e','f',0x00, 0x03,0x00,0x00,0x00, 'g','h','i',0x00,
		0x18,0x17,0x16,0x15, 0x14,0x13,0x12,0x11,
		0x06,0x00,0x00,0x00, 0x11,0x22,0x33,0x44, 0x55,0x66,
		0x01,0x00,
	}
	transaction := types.TransactionReader(buf)
	if !transaction.IsValid() {
		t.Fatalf("transaction is not valid although it should be")
	}
}

func TestAllInvalid(t *testing.T) {
	buf := []byte{
		// Transaction
		// TransactionData
		0x77,0x77,0x00,0x00, // size // <----- ERROR HERE
		0x33,0x00,0x00,0x00,
		0x08,0x07,0x06,0x05, 0x04,0x03,0x02,0x01,
		0x40,0x00,0x00,0x00,
		// TransactionSender
		0x1c,0x00,0x00,0x00, // size
		0x03,0x00,0x00,0x00, '1','2','3',0x00,
		0x10,0x00,0x00,0x00, 0x03,0x00,0x00,0x00, '4','5','6',0x00, 0x03,0x00,0x00,0x00, '7','8','9',0x00,
		// TransactionSender
		0x1c,0x00,0x00,0x00, // size
		0x03,0x00,0x00,0x00, 'a','b','c',0x00,
		0x10,0x00,0x00,0x00, 0x03,0x00,0x00,0x00, 'd','e','f',0x00, 0x03,0x00,0x00,0x00, 'g','h','i',0x00,
		0x18,0x17,0x16,0x15, 0x14,0x13,0x12,0x11,
		0x06,0x00,0x00,0x00, 0x11,0x22,0x33,0x44, 0x55,0x66,
		0x01,0x00,
	}
	transaction := types.TransactionReader(buf)
	if transaction.IsValid() {
		t.Fatalf("transaction is valid although it should not be")
	}
}

func TestPartialValid(t *testing.T) {
	buf := []byte{
		// Transaction
		// TransactionData
		0x58,0x00,0x00,0x00, // size
		0x33,0x00,0x00,0x00,
		0x08,0x07,0x06,0x05, 0x04,0x03,0x02,0x01,
		0x77,0x77,0x00,0x00, // <----- ERROR HERE
		// TransactionSender
		0x1c,0x00,0x00,0x00, // size
		0x03,0x00,0x00,0x00, '1','2','3',0x00,
		0x10,0x00,0x00,0x00, 0x03,0x00,0x00,0x00, '4','5','6',0x00, 0x03,0x00,0x00,0x00, '7','8','9',0x00,
		// TransactionSender
		0x1c,0x00,0x00,0x00, // size
		0x03,0x00,0x00,0x00, 'a','b','c',0x00,
		0x10,0x00,0x00,0x00, 0x03,0x00,0x00,0x00, 'd','e','f',0x00, 0x03,0x00,0x00,0x00, 'g','h','i',0x00,
		0x18,0x17,0x16,0x15, 0x14,0x13,0x12,0x11,
		0x06,0x00,0x00,0x00, 0x11,0x22,0x33,0x44, 0x55,0x66,
		0x01,0x00,
	}
	transaction := types.TransactionReader(buf)
	if !transaction.IsValid() {
		t.Fatalf("transaction is not valid although it should be")
	}
	if transaction.Data().IsValid() {
		t.Fatalf("transaction data is valid although it should not be")
	}
}

func TestBadInitValid(t *testing.T) {
	defer func() {
		if p := recover(); p == nil {
			t.Fatalf("Bad init of a membuffer did not panic")
		}
	}()
	transaction := &types.Transaction{}
	transaction.IsValid()
	t.Fatalf("Bad init of a membuffer did not panic")
}